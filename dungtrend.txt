#property indicator_separate_window
#property indicator_minimum -0.35
#property indicator_maximum 0.35
#property indicator_buffers 3
#property indicator_color1 Black
#property indicator_color2 Lime
#property indicator_color3 HotPink

extern int period = 5;
double gda_80[];
double gda_84[];
double gda_88[];

int init() {
    SetIndexStyle(0, DRAW_HISTOGRAM, STYLE_SOLID, 4);
    SetIndexStyle(1, DRAW_HISTOGRAM, STYLE_DOT, 1);
    SetIndexStyle(2, DRAW_HISTOGRAM, STYLE_DOT, 1);
    IndicatorDigits(Digits + 1);
    SetIndexBuffer(0, gda_80);
    SetIndexBuffer(1, gda_84);
    SetIndexBuffer(2, gda_88);
    IndicatorShortName("DUNGTREND");
    return (0);
}

int start() {
    int counted_bars = IndicatorCounted();
    if (counted_bars < 0) return (-1);

    int limit = Bars - counted_bars;
    if (counted_bars == 0) limit -= 1;

    // Tính toán chỉ nến mới nhất để tiết kiệm hiệu suất
    for (int i = limit - 1; i >= 0; i--) {
        double highVal = High[iHighest(NULL, 0, MODE_HIGH, period, i)];
        double lowVal = Low[iLowest(NULL, 0, MODE_LOW, period, i)];
        double midVal = (High[i] + Low[i]) / 2.0;

        // Tính toán các giá trị chỉ báo và tránh chia 0
        double ld_48 = (highVal - lowVal > 0) ? 0.66 * ((midVal - lowVal) / (highVal - lowVal) - 0.5) : 0;
        ld_48 = MathMin(MathMax(ld_48, -0.999), 0.999);
        gda_80[i] = MathLog((ld_48 + 1.0) / (1 - ld_48)) / 2.0;

        // Cập nhật buffer cho màu chỉ báo
        if (gda_80[i] > 0.0) {
            gda_84[i] = gda_80[i];
            gda_88[i] = 0.0;
        } else {
            gda_88[i] = gda_80[i];
            gda_84[i] = 0.0;
        }
    }
    return (0);
}
